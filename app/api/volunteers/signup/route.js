import bcrypt from "bcryptjs";
import { NextResponse } from "next/server";
import Volunteer from "@/models/Volunteer";
import dbConnect from "@/lib/dbConnect";

export async function POST(req) {
  try {
    await dbConnect();

    const { firstName, lastName, email, password, phone } = await req.json();

    // üîç V√©rification des champs requis
    if (!firstName || !lastName || !email || !password || !phone) {
      return NextResponse.json({ error: "Tous les champs sont obligatoires" }, { status: 400 });
    }

    // üìß V√©rifier si un b√©n√©vole existe d√©j√† avec cet email
    const existingVolunteer = await Volunteer.findOne({ email });
    if (existingVolunteer) {
      return NextResponse.json({ error: "Cet email est d√©j√† utilis√©" }, { status: 400 });
    }

    // ‚úÖ Cr√©ation du nouveau b√©n√©vole
    const newVolunteer = new Volunteer({
      firstName,
      lastName,
      email,
      password, // üõ°Ô∏è Le hachage est fait automatiquement via le pre-save middleware
      phone
    });

    await newVolunteer.save();

    return NextResponse.json({ message: "Compte cr√©√© avec succ√®s" }, { status: 201 });

  } catch (error) {
    console.error("‚ùå Erreur serveur :", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}
